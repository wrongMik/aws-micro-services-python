[metadata]
name = aws-micro-service-python
version = 0.1.0
author = Michele Ugolini
description = An example repository to implement serverless based microservices in AWS using Python
long_description = file: README.md
long_description_content_type = text/markdown
license = Apache License Version 2.0
keywords =
    aws
    microservice
    python
classifiers =
    Development Status :: 5 - Production/Stable
    Environment :: Other Environment
    License :: OSI Approved :: Apache Software License
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.11
platform = OS Independent

[options]
python_requires = >= 3.11
setup_requires =
    wheel
    setuptools

[mypy]
python_version = 3.11
ignore_missing_imports = True
warn_unused_configs = True

[flake8]
count = true
max-line-length = 120
max-complexity = 10
statistics = true
exclude =
    .git,
    __pycache__,
    old,
    build,
    dist
select = C,E,F,W,B,B950
per-file-ignores =
    */**/__init__.py:F401
ignore =
    E501,
    E126,
    W503,
    C816,
    C812,
    D100,
    D104,
    D105,
    D106,
    D107

[isort]
profile = black
multi_line_output = 3
include_trailing_comma = True
use_parentheses = True
force_single_line = False
indent = 4
line_length = 120
wrap_length = 119
length_sort = True
known_third_party =
    boto3,
    botocore,
    pytest,
    moto,
    starlette,
    python-json-logger,
    aws-lambda-powertools
known_first_party =
    micro_aws,
    micro_core
known_local_folder =
    fast_api,
    powertools_hello_world,
    sqs_batch_processing,
    tests
sections = FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER

[tool:pytest]
# Â https://docs.pytest.org/en/stable/reference.html#ini-options-ref
minversion = 7.4.0
testpaths =
    tests
log_cli = true
# https://docs.pytest.org/en/6.2.x/usage.html#detailed-summary-report
# https://docs.pytest.org/en/stable/reference.html#command-line-flags
filterwarnings =
    ignore::DeprecationWarning:botocore
    ignore::DeprecationWarning

[coverage:run]
source = src
include = *.py
omit =
    */setup.py
    */__main__.py
    */__init__.py
    */tests/*,
    */site-packages/*

[coverage:report]
show_missing = true
include = *.py
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if os.getenv\('AWS_EXECUTION_ENV'\):
    if os.environ.get\('AWS_EXECUTION_ENV'\):
    if __name__ == .__main__.:

[coverage:html]
directory = coverage/html/
skip_covered = true

[coverage:xml]
output = coverage/xml/coverage.xml
